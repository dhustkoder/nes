# ca65 configuration for iNES file

# Defines areas where code/data is put into memory during linking
# fill=yes forces area to be padded to specified size in output
MEMORY
{

	# 2K RAM in NES
	ZP:      start =  0, size = $100, type = rw;
    
	# Skip the $100 bytes for stack
    
	SRAM:    start =  $200, size = $600, type = rw;
	
	# Pseudo area for iNES header
	HEADER:  start =     0, size = 16, type = ro, fill = yes;
	
	# ROM
	ROM:     start = $8000, size = $7FFA, type = ro, fill = yes;
	
	VECTORS: start = $FFFC, size = 6, type = ro, fill = yes;
	# CHR ROM
	
	CHARS:   start = 0, size = $2000, type = ro, fill = yes;
}


# Defines named segments you refer to in assembler, and sets up order
# of data in output file
# align=$100 allows use of .align directive with a value up to $100
SEGMENTS
{
	# These make up the iNES file
	HEADER:   load = HEADER, type = ro;
	CODE:     load = ROM,    type = ro, align = $100;
	VECTORS:  load = VECTORS,type = ro;
	CHARS:    load = CHARS,  type = ro;
	
	# These put data into memory
	ZEROPAGE: load = ZP,     type = zp;
	BSS:      load = SRAM,   type = bss;
}



