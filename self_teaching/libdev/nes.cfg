
# ca65 configuration for iNES Header and NES code

SYMBOLS {
	__STACKSIZE__: type = weak, value = $0300; # 3 pages stack
}


# Defines areas where code/data is put into memory during linking
# fill=yes forces area to be padded to specified size in output

MEMORY
{
	# zero page in NES
	ZP:      start =  $0000, size = 32, type = rw, define = yes;

	
	# $0300, 3 pages stack, from $0800 to $0500 (stack grows downwards on cc65/ca65 runtimelib)
	STACK:   start =  $0500, size =  __STACKSIZE__, type = rw, define = yes;

	# RAM, starting in zeropage               
	RAM:     start = $0020, size = __STACK_START__ - 1, type = rw, define = yes;


	

	# these will set the order in the output file
	
	# Pseudo area for iNES header
	HEADER:  start =  0, size = 16, type = ro, fill = yes;
	# header fills the rom from 0 - $0F

	# ROM
	ROM:     start = $8000, size = $7FFA, type = ro, fill = yes; 
	# ROM fills the rom from $10 - $800A


	# hardware vectors
	VECTORS: start = $FFFA, size = 6, type = ro, fill = yes;
	# VECTORS fill the rom from $800A to $800F


	# CHR ROM
	CHARS:   start = 0, size = $2000, type = ro, fill = yes;
	# this is going after the firsts 32KB of PRG, and will be 
	# read by emulators as the CHR chip
}

# Defines named segments you refer to in assembler, and sets up order
# of data in output file
# align=$100 allows use of .align directive with a value up to $100

SEGMENTS
{
	
	# These make up the iNES file
	HEADER:   load = HEADER, type = ro;
	CODE:     load = ROM,    type = ro, align = $100;
	VECTORS:  load = VECTORS,type = ro;
	STARTUP:  load = ROM,    type = ro;
	CHARS:    load = CHARS,  type = ro;
	



	# These are data addresses
	ZEROPAGE: load = ZP,     type = zp;
	BSS:      load = RAM,    type = bss;
	RODATA:   load = ROM,    type = ro;
	DATA:     load = ROM,    run = RAM,  type = rw,  define = yes;
}
