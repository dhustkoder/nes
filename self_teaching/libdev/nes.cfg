
# ca65 configuration for iNES file

SYMBOLS {
	__STACKSIZE__: type = weak, value = $0300; # 3 pages stack
}


# Defines areas where code/data is put into memory during linking
# fill=yes forces area to be padded to specified size in output

MEMORY
{
	# 2K RAM in NES
	ZP:      start =  $0000, size =  $00FF, type = rw, define = yes;

	# Skip the $100 bytes for stack
	SRAM:    start =  $0500, size =  __STACKSIZE__, type = rw, define = yes;

	# RAM
	RAM: 	start = $0100, size = __SRAM_START__ - 1, type = rw, define = yes;

	# Pseudo area for iNES header
	HEADER:  start =  0, size = 16, type = ro, fill = yes;

	# ROM
	ROM:     start = $8000, size = $7FFA, type = ro, fill = yes;

	# hardware vectors
	VECTORS: start = $FFFA, size = 6, type = ro, fill = yes;


	# CHR ROM
	CHARS:   start = 0, size = $2000, type = ro, fill = yes;
}

# Defines named segments you refer to in assembler, and sets up order
# of data in output file
# align=$100 allows use of .align directive with a value up to $100

SEGMENTS
{
	
	# These make up the iNES file
	HEADER:   load = HEADER, type = ro;
	CODE:     load = ROM,    type = ro, align = $100;
	VECTORS:  load = VECTORS,type = ro;
	CHARS:    load = CHARS,  type = ro;
	STARTUP:  load = ROM,    type = ro;



	# These put data into memory
	ZEROPAGE: load = ZP,     type = zp;
	BSS:      load = RAM,    type = bss;
	RODATA:   load = ROM,    type = ro;
	DATA:     load = ROM, run = SRAM, type = rw,  define = yes;
}
